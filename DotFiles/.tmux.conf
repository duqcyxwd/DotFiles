
# /*****************************/
# /*  _____ __  __ _   ___  __ */
# /* |_   _|  \/  | | | \ \/ / */
# /*   | | | |\/| | | | |\  /  */
# /*   | | | |  | | |_| |/  \  */
# /*   |_| |_|  |_|\___//_/\_\ */
# /*                           */
# /*****************************/

# Tmux Manual 1:
# https://man7.org/linux/man-pages/man1/tmux.1.html
# Tmux Manul2:
# http://man.openbsd.org/OpenBSD-current/man1/tmux.1#choose-tree
# Example config:
# https://www.barbarianmeetscoding.com/blog/jaimes-guide-to-tmux-the-most-awesome-tool-you-didnt-know-you-needed
# tmux list-keys to list all keys

# Remap prefix from 'C-b' to 'C-\'
unbind C-b
set -g prefix 'C-\'
bind 'C-\' send-prefix
# Not using -r becasue you will not know when timeout ends
# bind -r 'C-\' last-window

bind space -r resize-pane -Z

# Notes:
# use c-keys as binding for actions can be repeat, like split/delete
# use not ctrl key for actions no need to repeat, like: display-panels or select
# ? to list list all bindinds
# d for detach

# Core commands {{{1
# ------------------------------------------------------------------------------

# bind w choose-tree
# bind 'C-\' choose-window
# bind 'C-\' choose-tree -Z -w
bind '\' choose-tree -Z -w
bind -T  prefix w choose-window -s

bind C-q detach-client
bind C-a detach-client

bind :     command-prompt
bind 'C-;' command-prompt
bind ';'   command-prompt

bind q display-panes


# [Global] Smart Window Moving keys {{{1
# ------------------------------------------------------------------------------

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
# Prefix <C-\> is already used, I don't need this recent panel
# tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
# if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
# if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"


bind-key -T copy-mode-vi 'C-h' select-pane -L # Left
bind-key -T copy-mode-vi 'C-j' select-pane -D # Down
bind-key -T copy-mode-vi 'C-k' select-pane -U # Up
bind-key -T copy-mode-vi 'C-l' select-pane -R # Right
# bind-key -T copy-mode-vi 'C-\' select-pane -l # Recent


bind C-l send-keys 'C-l' # for clean screen
bind C-k send-keys 'C-k' # for accept current suggestion

bind C-k clear-history
bind L   clear-history



# Create/Split/Delete window/panel {{{1
# ------------------------------------------------------------------------------
# Use n to create new window
# use vim split to create new panel
unbind n
bind n new-window -c '#{pane_current_path}'

# Use choose-tree and T to tag stuff, X to delete
# Tree mode tips: https://github.com/tmux/tmux/wiki/Getting-Started#choosing-sessions-windows-and-panes
# Use t to tag and X to kill tags session window

# use vim-like keys for splits and windows
unbind v
unbind s

bind v   split-window -h -c '#{pane_current_path}'
bind s   split-window -v -c '#{pane_current_path}'
bind c-v split-window -r -h -c '#{pane_current_path}'
bind c-s split-window -r -v -c '#{pane_current_path}'

# Use x to kill pane, and kill all panel will kill current window
# C-\ &          kill the current window
# & kill window, but I don't want use it
bind x   -r kill-pane
bind c-x -r kill-pane
bind c-c -r kill-pane


# Window/Panel Surgery {{{1
# ------------------------------------------------------------------------------

# C-\ ,          rename the current window
# :renamew       Rename window
# :joinp -s :2<CR>  move window 2 into a new pane in the current window
# :joinp -t :1<CR>  move the current pane into a new pane in window 1
# .              move window - prompted for a new number
#:break-pane     move current pane into a new window


# Build-in, not need to update
bind-key C-Up    -r -T prefix resize-pane -U 5
bind-key C-Down  -r -T prefix resize-pane -D 5
bind-key C-Left  -r -T prefix resize-pane -L 5
bind-key C-Right -r -T prefix resize-pane -R 5

# Window Layout {{{1
# ------------------------------------------------------------------------------
#  [Move window to pane](http://unix.stackexchange.com/questions/14300/tmux-move-window-to-pane)
bind C-o -r rotate-window

bind + select-layout main-horizontal
bind = select-layout main-vertical

bind enter   -r next-layout
bind c-enter -r next-layout

# z: make a pane go full screen. Hit C-b z again to shrink it back to its previous size
# C-<arrow key>: Resize pane in direction of <arrow key>4


# Rename Session/window {{{1
# ------------------------------------------------------------------------------
# :renamew Rename window
# $ Rename Session

# C-\ ,          rename the current window

# Source/Reload {{{1
# ------------------------------------------------------------------------------
# Easy config reload
bind c-r source-file ~/.tmux.conf \; display-message "tmux.conf reloaded!"
bind r   source-file ~/.tmux.conf \; display-message "tmux.conf reloaded!"


# Window Next {{{1
# ------------------------------------------------------------------------------
# Enter/delete loop window
bind t next-window
bind T previous-window

bind c-n -r next-window
bind c-p -r previous-window

# Copy Mode {{{1
# ------------------------------------------------------------------------------
bind C-[ copy-mode
bind [   copy-mode
bind ]   paste-buffer
# bind r refresh-client

# Setup 'v' to begin selection as in Vim
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
bind -T copy-mode-vi r send-keys -X rectangle-toggle

# Update default binding of `Enter` to also use copy-pipe
unbind -T copy-mode-vi Enter
bind -T copy-mode-vi Enter send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"


# Enable native Mac OS X copy/paste
set -g default-command "/bin/bash -c 'which reattach-to-user-namespace >/dev/null && exec reattach-to-user-namespace $SHELL -l || exec $SHELL -l'"

# Mouse copy WIP {{{1
# ------------------------------------------------------------------------------
setw -g mouse off

# macOS only
set  -g mouse on
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M
bind -n C-WheelUpPane select-pane -t= \; copy-mode -e \; send-keys -M
bind -T copy-mode-vi    C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-vi    C-WheelDownPane send-keys -X halfpage-down
bind -T copy-mode-emacs C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-emacs C-WheelDownPane send-keys -X halfpage-down

# To copy, left click and drag to highlight text in yellow,
# once you release left click yellow text will disappear and will automatically be available in clibboard

bind-key -n MouseDown2Pane paste-buffer

# Colors/Theme {{{1
# ------------------------------------------------------------------------------
setw -g other-pane-height 25
setw -g other-pane-width 80

# enable UTF-8 support in status bar
set -gq status-utf8 on

# center the status bar
set -g status-justify centre

# Show more things on left
set -g status-left-length 20

# update status bar info
set -g status-interval 60

# # Color scheme 1
# # Status Bar
# set -g status-style bg=black
# set -g status-style fg=white
# set -g pane-border-style fg=cyan
# set -g pane-active-border-style fg=yellow
# # set -g status-left '#[fg=green]#H #[default]'
# set -g status-left '#[fg=green] #S #[fg=yellow]#I/#[fg=cyan]#P '
# # show hostname, date, tim 100
# # set -g status-right '%a%l:%M:%S %p#[default] #[fg=blue]%Y-%m-%d'
# set -g status-right '#(battery -t) #[fg=cyan] %d %b %R '
# set -g message-style bg='#44475a',fg='#8be9fd'


# Color scheme 2
# {{Dracula}} with my changes
# https://cassidy.codes/blog/2019-08-03-tmux-colour-theme/
## Dracula Colours
# background_color '#282a36'
# current_line_color '#44475a'
# foreground_color '#f8f8f2'
# comment_color '#6272a4'
# cyan '#8be9fd'
# green '#50fa7b'
# orange '#ffb86c'
# pink '#ff79c6'
# purple '#bd93f9'
# red '#ff5555'
# yellow '#f1fa8c'

# pane border
set -g  pane-border-style fg='#6272a4'
set -g  pane-active-border-style fg='#ff79c6'
# message text
set -g  message-style bg='#282a36',fg='#8be9fd'
set -g  status-style bg='#282a36',fg='#bd93f9'
# status left
# are we controlling tmux or the content of the panes?
set -g  status-left '#{?client_prefix,#[bg=#44475a],#[bg=#282a36]}#[fg=#f8f8f2]#{?client_prefix, P , p }'
set -ga status-left '#[fg=#f8f8f2] #S #[fg=yellow]#I/#[fg=cyan]#P'
set -ga status-left '#[fg=#ff79c6] #{?window_zoomed_flag, ↕  ,   }'


# Working one
# set -g status-left '#[bg=#f8f8f2]#[fg=#282a36]#{?client_prefix,#[bg=#ff79c6],} P '
# set -ga status-left '#[bg=#282a36]#[fg=#f8f8f2] #S #[fg=yellow]#I/#[fg=cyan]#P'
# set -ga status-left '#[bg=#282a36]#[fg=#ff79c6] #{?window_zoomed_flag, ↕  ,   }'

# window status
setw -g window-status-style fg='#bd93f9',bg=default
setw -g window-status-current-style fg='#ff79c6',bg='#282a36'

# set -g window-status-current-format "#[fg=#282a36]#[bg=#bd93f9]#[fg=#f8f8f2]#[bg=#bd93f9] #I #W #[fg=#bd93f9]#[bg=#282a36]"
# set -g window-status-current-format "#[fg=#282a36]#[bg=#f1fa8c]#[fg=#000000]#[bg=#f1fa8c] #I #W #[fg=#f1fa8c]#[bg=#282a36]"
# set -g window-status-current-format "#[fg=#282a36]#[bg=#6272a4]#[fg=#f8f8f2]#[bg=#6272a4] #I #W #[fg=#6272a4]#[bg=#282a36]"
set -g window-status-current-format "#[fg=#282a36]#[bg=#50fa7b]#[fg=#000000]#[bg=#50fa7b] #I #W #[fg=#50fa7b]#[bg=#282a36]"
set -g window-status-format         "#[fg=#282a36]#[bg=#282a36]#[fg=#f8f8f2]#[bg=#282a36] #I #W #[fg=#282a36]"


# # Original
# set -g window-status-current-format "#[fg=#44475a]#[bg=#bd93f9]#[fg=#f8f8f2]#[bg=#bd93f9] #I #W #[fg=#bd93f9]#[bg=#44475a]"
# set -g window-status-format "#[fg=#f8f8f2]#[bg=#44475a]#I #W #[fg=#44475a] "

# status right
set -g status-right ' #[fg=#f8f8f2]#{?client_prefix,#[bg=#44475a],#[bg=#282a36]} %d %b %R  #(uptime | cut -f 4-5 -d " " | cut -f 1 -d ",") '


# Configuration {{{1
# ------------------------------------------------------------------------------

# use 256 xterm for pretty colors. This enables same colors from iTerm2 within tmux.
# This is recommended in neovim :healthcheck
# In my Alacritty, it can only support tmux-256color or screen-256color
set -g  default-terminal "screen-256color"
set -ga terminal-overrides ",alacritty:Tc"


# set -g default-terminal "tmux-256color"
# set -ga terminal-overrides ",tmux-256color:Tc"


# increase scroll-back history
set -g history-limit 100000

# vi is good
setw -g mode-keys vi


# Set window notifications
setw -g automatic-rename on
setw -g display-panes-time 1500
setw -g monitor-activity on


set -g visual-activity on

# Allow the arrow key to be used immediately after changing windows
set -g repeat-time 1000

# start window index at 1 instead of 0
set -g base-index 1
# start pane index at 1 instead of 0
setw -g pane-base-index 1

# highlight window when it has new activity
setw -g monitor-activity on
set  -g visual-activity  on


# decrease command delay (increases vim responsiveness)
set -sg escape-time 1
set -g renumber-windows on # re-number windows when one is closed
set -g focus-events on

