(setq ido-separator "\n")
(setq ido-enable-flex-matching t)

(ido-mode 1)
(setq ns-pop-up-frames nil)
(setq truncate-lines -1)

;;; (when (display-graphic-p) (load-theme 'solarized-dark t))

;; Start Emacs server so we can call emacs client
;; (server-start)


(use-package smooth-scroll
  :ensure t
  :config (progn
            (smooth-scroll-mode 1)
            (setq scroll-margin 50
                  scroll-conservatively 9999
                  auto-window-vscroll nil
                  scroll-step 1)))

(use-package multiple-cursors :ensure t :pin melpa-stable
  :bind (("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C->" . mc/mark-all-like-this)
         ("C-S-c C-S-c" . mc/edit-lines)
         ("C-S-c C-e" . mc/edit-ends-of-lines)))


;;Exit insert mode by pressing j and then j quickly
;; (use-package key-chord
;;   :ensure t
;;   :config (progn (setq key-chord-two-keys-delay 0.3)
;;                  (key-chord-mode 1)))

;; (use-package minimap
;;   :ensure t
;;   :config (progn
;;             (minimap-mode 0)))

;; edit-server allow emacs to edit stuff form browser
;; (use-package edit-server
;;   :ensure t
;;   :config (edit-server-start))

;; (put-clojure-indent 'partial 5)

;; Tip M+: Eval a Expression
;; (equal major-mode 'cider-repl-mode)

(use-package whitespace :ensure t
  :init (setq whitespace-style '(face trailing lines-tail tabs)
              whitespace-line-column 80))

(use-package solarized-theme :ensure t
  :init (progn
          (setq solarized-high-contrast-mode-line t
                solarized-use-less-bold t
                solarized-emphasize-indicators nil
                solarized-scale-org-headlines nil
                x-underline-at-descent-line t)
          (load-theme 'solarized-dark' no-confirm))
  :config (setq color-theme-is-global t))

(defun powerline-center-evil-theme-cus ()
  "Setup a mode-line with major, evil, and minor modes centered."
  (interactive)
  (setq-default mode-line-format
                '("%e"
                  (:eval
                   (let* ((file-name (buffer-file-name (current-buffer)))
                          (active (powerline-selected-window-active))
                          (mode-line (if active 'mode-line 'mode-line-inactive))
                          (face2 (if active 'powerline-active2 'powerline-inactive2))
                          (face1 (if active 'powerline-active1 'powerline-inactive1))
                          (separator-left (intern (format "powerline-%s-%s"
                                                          (powerline-current-separator)
                                                          (car powerline-default-separator-dir))))
                          (separator-right (intern (format "powerline-%s-%s"
                                                           (powerline-current-separator)
                                                           (cdr powerline-default-separator-dir))))
                          (lhs (list (powerline-raw "[" face1)
                                     (powerline-raw (projectile-project-name) face1)
                                     (powerline-raw (concat ""
                                                            (when (and file-name vc-mode)
                                                              (concat ":" (-> file-name
                                                                              vc-working-revision
                                                                              (string-utils-truncate-to 10))
                                                                      "")))
                                                    face1)
                                     (powerline-raw "]" face1)
                                     (powerline-raw " %*%b%* " face1)
                                     (funcall separator-left face1 mode-line)
                                     (powerline-buffer-size nil 'l)
                                     (powerline-raw " ")
                                     (funcall separator-left mode-line face1)

                                     ;; (powerline-narrow face2 'l)
                                     ;; (powerline-vc face1)
                                     ))
                          (rhs (append (list (powerline-raw global-mode-string face1 'r)
                                             (powerline-raw "%4l" face1 'r)
                                             (powerline-raw ":" face1)
                                             (powerline-raw "%3c" face1 'r)
                                             (funcall separator-right face1 mode-line)
                                             (powerline-raw " ")
                                             (powerline-raw "%3p" nil 'r)
                                             )
                                       (if evil-mode
                                           (list (funcall separator-right mode-line face1)
                                                 (powerline-raw evil-mode-line-tag face1 'l)
                                                 (powerline-raw " " face1)
                                                 ;; (funcall separator-left face1 face2)
                                                 ))
                                       ;; (list
                                       ;;  (powerline-hud face1 face2))
                                       ))
                          (center (append (list (powerline-raw " " face1)
                                                (funcall separator-left face1 face2)
                                                (when (and (boundp 'erc-track-minor-mode) erc-track-minor-mode)
                                                  (powerline-raw erc-modified-channels-object face2 'l))
                                                (powerline-major-mode face2 'l)
                                                (powerline-process face2)
                                                (powerline-raw " " face2))
                                          ;; (if (split-string (format-mode-line minor-mode-alist))
                                          ;;     ;; (append (if evil-mode
                                          ;;     ;;             (list (funcall separator-right face2 face1)
                                          ;;     ;;                   (powerline-raw evil-mode-line-tag face1 'l)
                                          ;;     ;;                   (powerline-raw " " face1)
                                          ;;     ;;                   (funcall separator-left face1 face2)))
                                          ;;     ;;         ;; (list (powerline-minor-modes face2 'l)
                                          ;;     ;;         ;;       (powerline-raw " " face2)
                                          ;;     ;;         ;;       (funcall separator-right face2 face1))
                                          ;;     ;;         )
                                          ;;     (list (powerline-raw evil-mode-line-tag face2)
                                          ;;           (funcall separator-right face2 face1)))
                                          )))
                     (concat (powerline-render lhs)
                             (powerline-fill-center face1 (/ (powerline-width center) 2.0))
                             ;; (powerline-render center)
                             (powerline-fill face1 (powerline-width rhs))
                             (powerline-render rhs)))))))

(use-package powerline :ensure t
  :config (progn
            ;; (powerline-light-thme)
            ;; (powerline-default-theme)
            (powerline-center-evil-theme-cus)
            (setq powerline-arrow-shape 'arrow)))

(defun my-update-modified-flag ()
  "Update the buffer modified flag."
  (interactive)
  (let* ((buffer (current-buffer))
         (basefile
          (or (buffer-file-name buffer)
              (error "Buffer %s has no associated file" buffer)))
         (tempfile (make-temp-file "buffer-content-")))
    (with-current-buffer buffer
      (save-restriction
        (widen)
        (write-region (point-min) (point-max) tempfile nil 'silent)))
    (if (= (call-process "diff" nil nil nil basefile tempfile) 0)
        (progn
          (set-buffer-modified-p nil)
          (message "Buffer matches file"))
      (message "Buffer doesn't match file"))
    (delete-file tempfile)))

;; Disable the annoying square
(setq ring-bell-function 'ignore)
