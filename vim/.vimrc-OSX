" vim:fdm=marker:ts=4:sw=4:et:
"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|
"
" Chuan's .vimrc file From Scott

let mapleader = " "

" Section: Vundle Setting Plugins {{{1
"--------------------------------------------------------------------------


" Plug-in
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle/
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"let path = '~/some/path/here'
"call vundle#rc(path)

" let Vundle manage Vundle, required
Plugin 'gmarik/vundle'
Plugin 'L9' " Required

" The following are examples of different formats supported.
" Keep Plugin commands between here and filetype plugin indent on.

" scripts on GitHub repos
Plugin 'tpope/vim-fugitive'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'tpope/vim-rails.git'
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'rbgrouleff/bclose.vim'

" Plugins supported by spacevim
Plugin 'airblade/vim-gitgutter'
" Plugin 'easymotion/vim-easymotion'
" Plugin 'kien/ctrlp.vim'
Plugin 'mbbill/undotree'
Plugin 'rking/ag.vim'
" Plugin 'scrooloose/nerdtree'
Plugin 'shougo/unite.vim'
Plugin 'szw/vim-maximizer'
Plugin 'tpope/vim-commentary'
" Plugin 'tpope/vim-fugitive'


" Undo tree
Plugin 'sjl/gundo.vim'

"Gist
Plugin 'mattn/webapi-vim'
Plugin 'mattn/gist-vim'
"Markdown
Plugin 'plasticboy/vim-markdown'
Plugin 'terryma/vim-multiple-cursors'

"Clojure
"Plugin 'tpope/vim-fireplace'
"Plugin 'guns/vim-clojure-static'
Plugin 'oblitum/rainbow'
"Plugin 'guns/vim-slamhound'
Plugin 'vim-scripts/paredit.vim'

"Spacevim
" Plugin 'jimmay5469/vim-spacemacs'
" Plugin 'SpaceVim/SpaceVim'
" Plugin 'hecal3/vim-leader-guide'
Plugin 'liuchengxu/vim-which-key'
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
" By default timeoutlen is 1000 ms
set timeoutlen=500

let g:spacemacs#plugins = [
  \ 'airblade/vim-gitgutter',
  \ 'easymotion/vim-easymotion',
  \ 'kien/ctrlp.vim',
  \ 'mbbill/undotree',
  \ 'rking/ag.vim',
  \ 'scrooloose/nerdtree',
  \ 'shougo/unite.vim',
  \ 'szw/vim-maximizer',
  \ 'tpope/vim-commentary',
  \ 'tpope/vim-fugitive',
\ ]

" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" scripts from http://vim-scripts.org/vim/scripts.html
Plugin 'FuzzyFinder'
" scripts not on GitHub
" Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" ...

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on     " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList          - list configured plugins
" :PluginInstall(!)    - install (update) plugins
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Plugin commands are not allowed.
" Put your stuff after this line


" Section: Key mappings {{{1
"--------------------------------------------------------------------------

" useful macros I use the most
nmap \a :set formatoptions-=a<CR>:echo "autowrap disabled"<CR>
nmap \A :set formatoptions+=a<CR>:echo "autowrap enabled"<CR>
" nmap \b :set nocin tw=80<CR>:set formatoptions+=a<CR>
nmap \c :TlistToggle<CR>
nmap \d :%!perltidy<CR>
nmap \e :NERDTreeToggle<CR>
nmap \g :Gstatus<CR>
nmap \I :PluginInstall<CR>
nmap \n :setlocal number!<CR>:setlocal number?<CR>
nmap \l :set foldcolumn=0<CR>
nmap \L :set foldcolumn=2<CR>
nmap \o :set paste!<CR>:set paste?<CR>
nmap \q :nohlsearch<CR>
nmap \h :nohlsearch<CR>
nmap \r :%Eval<CR>
nmap \R :so $MYVIMRC<CR>
nmap \t :noh<CR>
" nmap \s :cpp<CR>
" nmap \s :setlocal invspell<CR>
" nmap \t :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
" nmap \T :set expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>
nmap \u :setlocal list!<CR>:setlocal list?<CR>
nmap \w :setlocal wrap!<CR>:setlocal wrap?<CR>
nmap \x :w<CR>:%! xmllint --format - <CR>
nmap \Y :vertical resize 40<CR>:wincmd l<CR>
nmap \y :exec "vertical resize " . (80 + (&number * &numberwidth))<CR>:wincmd l<CR>
nmap \z :w<CR>:!<Up><CR>

" You don't know what you're missing if you don't use this.
nmap <C-e> :e#<CR>

" Move between open buffers.
map <C-n> :bnext<CR>
map <C-p> :bprev<CR>

" Next line
nmap <S-Enter> O<Esc>
nmap <CR> o<Esc>

" Sublime-like multiple cursor selector
let g:multi_cursor_next_key='<C-s>'
let g:multi_cursor_prev_key='<C-S>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

" Let's try buffkill-vim using my favorite Emacs binding...
" nmap <Esc>k :Bclose<CR>
" nmap <M-k> :BD<CR>"{{{"}}}
" nmap <D-k> :BD<CR>

" Emacs-like bindings in normal mode
nmap <C-x>0 <C-w>c
nmap <C-x>1 <C-w>o
nmap <C-x>o <C-w><C-w>
nmap <M-o> <C-w><C-w>

map <C-=>1 :color aiseered<enter>:source ~/.vim/plugin/mark.vim<enter>
map <C-=>2 :color baycomb<enter>:source ~/.vim/plugin/mark.vim<enter>
map <C-=>3 :color borland<enter>:source ~/.vim/plugin/mark.vim<enter>
map <C-=>4 :color biogoo <enter>:source ~/.vim/plugin/mark.vim<enter>
map <C-=>5 :color chocolateliquor<enter>:source ~/.vim/plugin/mark.vim<enter>
map <C-=>6 :color dusk<enter>:source ~/.vim/plugin/mark.vim<enter>
map <C-=>7 :color dw_red<enter>:source ~/.vim/plugin/mark.vim<enter>
map <C-=>8 :color ekvoli<enter>:source ~/.vim/plugin/mark.vim<enter>
map <C-=>9 :color tabula<enter>:source ~/.vim/plugin/mark.vim<enter>

" Emacs-like bindings in insert mode
imap <C-e> <C-o>$

" Emacs-like bindings in command line
cnoremap <C-a>  <Home>
cnoremap <C-b>  <Left>
cnoremap <C-f>  <Right>
cnoremap <C-d>  <Delete>
cnoremap <M-b>  <S-Left>
cnoremap <M-f>  <S-Right>
" cnoremap <M-d>  <S-right><Delete>
cnoremap <Esc>b <S-Left>
cnoremap <Esc>f <S-Right>
cnoremap <Esc>d <S-right><Delete>
cnoremap <C-g>  <C-c>

" Why not use the space or return keys to toggle folds?
" nnoremap <space> za
nnoremap <CR> za

" Swap implementations of ` and ' jump to markers
" By default, ' jumps to the marked line, ` jumps to the marked line and
" column, so swap them
nnoremap ' `
nnoremap ` '

" Just to beginning and end of lines easier. From http://vimbits.com/bits/16
noremap H ^
noremap L $

" Windows
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-h> <C-W>h
nmap <C-l> <C-W>l

nnoremap gj <C-W>j
nnoremap gk <C-W>k
nnoremap gh <C-W>h
nnoremap gl <C-W>l

map <C-J> <C-W>j<C-W>_ " open and maximize the split below
map <C-K> <C-W>k<C-W>_ " open and maximize the split above
" Search for the word under the cursor in the current directory
" nmap <C-k> :Ag "\b<cword>\b" <CR>
" :map <F2> "zyiw<C-w>wo<Esc>"zp<C-w>w

" Insert empty line
nmap <silent><C-CR> :set paste<CR>m`o<Esc>``:set nopaste<CR>
nmap <silent><S-CR> :set paste<CR>m`O<Esc>``:set nopaste<CR>

" Alt-p pipes the current buffer to the current filetype as a command
" (good for perl, python, ruby, shell, gnuplot...)
nmap <M-p>  :call RunUsingCurrentFiletype()<CR>
nmap <Esc>p :call RunUsingCurrentFiletype()<CR>
function! RunUsingCurrentFiletype()
    execute 'write'
    execute '! clear; '.&filetype.' <% '
endfunction


" Section: Markdown function {{{1
"-------------------------------------------------------------------------
function! MarkdownLevel()
    if getline(v:lnum) =~ '^# .*$'
        return ">1"
    endif
    if getline(v:lnum) =~ '^## .*$'
        return ">2"
    endif
    if getline(v:lnum) =~ '^### .*$'
        return ">3"
    endif
    if getline(v:lnum) =~ '^#### .*$'
        return ">4"
    endif
    if getline(v:lnum) =~ '^##### .*$'
        return ">5"
    endif
    if getline(v:lnum) =~ '^###### .*$'
        return ">6"
    endif
    return "="
endfunction
au BufEnter *.md setlocal foldexpr=MarkdownLevel()
au BufEnter *.md setlocal foldmethod=expr


" Section: Hacks {{{1
"--------------------------------------------------------------------------

" Make j & k linewise {{{2

" turn off linewise keys -- normally, the `j' and `k' keys move the cursor down
" one entire line. with line wrapping on, this can cause the cursor to actually
" skip a few lines on the screen because it's moving from line N to line N+1 in
" the file. I want this to act more visually -- I want `down' to mean the next
" line on the screen
nnoremap j gj
nnoremap k gk


" having Ex mode start or showing me the command history
" is a complete pain in the ass if i mistype
map Q <silent>
map q: <silent>
map K <silent>

" Make the cursor stay on the same line when window switching {{{2
function! KeepCurrentLine(motion)
    let theLine = line('.')
    let theCol = col('.')
    exec 'wincmd ' . a:motion
    if &diff
        call cursor(theLine, theCol)
    endif
endfunction

nnoremap <C-w>h :call KeepCurrentLine('h')<CR>
nnoremap <C-w>l :call KeepCurrentLine('l')<CR>



cno sov so ~/.vimrc<CR>:echo "reload .vimrc"<CR>

" Section: Vim options {{{1
"--------------------------------------------------------------------------

set exrc                    " Enable per-directory .vimrc files and
                            " disable unsafe commands in them
set secure

set autoindent              " Carry over indenting from previous line
set autoread                " Don't bother me hen a file changes

set cindent                 " Automatic program indenting
set cinkeys-=0#             " Comments don't fiddle with indenting
set cino=(0                 " Indent newlines after opening parenthesis
set commentstring=\ \ #%s   " When folds are created, add them to this
set copyindent              " Make autoindent use the same chars as prev line
set directory-=.            " Don't store temp files in cwd
set encoding=utf8           " UTF-8 by default
set expandtab               " No tabs
set fileformats=unix,dos,mac  " Prefer Unix
set fillchars=vert:\ ,stl:\ ,stlnc:\ ,fold:-,diff:┄
                            " Unicode chars for diffs/folds, and rely on
                            " Colors for window borders
set foldmethod=syntax
silent! set foldmethod=marker " Use braces by default

set formatoptions=tcqn1     " t - autowrap normal text
                            " c - autowrap comments
                            " q - gq formats comments
                            " n - autowrap lists
                            " 1 - break _before_ single-letter words
                            " 2 - use indenting from 2nd line of para
set hidden                  " Don't prompt to save hidden windows until exit
set history=200             " How many lines of history to save
set hlsearch                " Hilight searching
set ignorecase              " Case insensitive
set incsearch               " Search as you type
set infercase               " Completion recognizes capitalization
set laststatus=2            " Always show the status bar
set linebreak               " Break long lines by word, not char
set backspace=indent,eol,start
                            " Allow backspace in insert mode
set ttyfast                 " Optimize for fast terminal connections
set gdefault                " Add the g flag to search/replace by default

" set list                    " Show invisble characters in listchars
set listchars=tab:▶\ ,trail:◀,extends:»,precedes:«
                            " Unicode characters for various things
" set listchars+=eol:¬,nbsp:_ " Show “invisible” characters
set matchtime=2             " Tenths of second to hilight matching paren
set modelines=5             " How many lines of head & tail to look for ml's
set showmode                " Show the current mode
set showcmd                 " Show the (partial) command as it’s being typed
silent! set mouse=nvc       " Use the mouse, but not in insert mode
set nobackup                " No backups left after done editing
set nonumber                " No line numbers to start
set visualbell t_vb=        " No flashing or beeping at all
set nowritebackup           " No backups made while editing
set printoptions=paper:letter " US paper
set ruler                   " Show row/col and percentage
set scroll=4                " Number of lines to scroll with ^U/^D
set scrolloff=15            " Keep cursor away from this many chars top/bot
set shiftround              " Shift to certain columns, not just n spaces
set shiftwidth=4            " Number of spaces to shift for autoindent or >,<
set shortmess+=A            " Don't bother me when a swapfile exists
set showbreak=              " Show for lines that have been wrapped, like Emacs
set showmatch               " Hilight matching braces/parens/etc.
set sidescrolloff=3         " Keep cursor away from this many chars left/right
set smartcase               " Lets you search for ALL CAPS
set softtabstop=4           " Spaces 'feel' like tabs
set suffixes+=.pyc          " Ignore these files when tab-completing
set tabstop=4               " The One True Tab
set title                   " Don't set the title of the Vim window
set wildmenu                " Show possible completions on command line
set wildmode=list:longest,full " List all options and complete
set wildignore=*.class,*.o,*~,*.pyc,.git,node_modules  " Ignore certain files in tab-completion
set nostartofline           " Don’t reset cursor to start of line when moving around.

set clipboard+=unnamed      " use system clipboard

" Section: Commands & Functions {{{1
"--------------------------------------------------------------------------


" http://stackoverflow.com/questions/1005/getting-root-permissions-on-a-file-inside-of-vi
cmap w!! w !sudo tee >/dev/null %

" trim spaces at EOL
command! TEOL %s/ \+$//
command! CLEAN retab | TEOL


" hightlight more than 80 characters
function! HighlightTooLongLines()
  highlight def link RightMargin Error
  if &textwidth != 0
    exec 'match RightMargin /\%<' . (&textwidth + 4) . 'v.\%>' . (&textwidth + 2) . 'v/'
  endif
endfunction


" Rename.vim  -  Rename a buffer within Vim and on the disk
" Copyright June 2007 by Christian J. Robinson <infynity@onewest.net>
" Distributed under the terms of the Vim license.  See ":help license".
" http://www.infynity.spodzone.com/vim/Rename.vim
" Usage: :Rename[!] {newname}
command! -nargs=* -complete=file -bang Rename :call Rename("<args>", "<bang>")
function! Rename(name, bang)
    let l:curfile = expand("%:p")
    let v:errmsg = ""
    silent! exe "saveas" . a:bang . " " . a:name
    if v:errmsg =~# '^$\|^E329'
        if expand("%:p") !=# l:curfile && filewritable(expand("%:p"))
            silent exe "bwipe! " . l:curfile
            if delete(l:curfile)
                echoerr "Could not delete " . l:curfile
            endif
        endif
    else
        echoerr v:errmsg
    endif
endfunction


" Strip trailing whitespace (,ss)
function! StripWhitespace()
        let save_cursor = getpos(".")
        let old_query = getreg('/')
        :%s/\s\+$//e
        call setpos('.', save_cursor)
        call setreg('/', old_query)
endfunction
" noremap <leader>ss :call StripWhitespace()<CR>


" Automatic commands
if has("autocmd")
        " Enable file type detection
        filetype on
        " Treat .json files as .js
        autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
endif
" Section: Python specifics {{{1
"--------------------------------------------------------------------------


if has('python')
python << EOF
import os
import sys
sys.path.append(os.path.join(os.getenv('HOME'), '.vim', 'python'))
EOF
endif

" Section: Plugin settings {{{1
"--------------------------------------------------------------------------

runtime pathogen-bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect('~/.vim/pathogen-bundle/{}')
" call pathogen#infect()
call pathogen#helptags()

" NERD_tree.vim
let NERDTreeIgnore = ['\~$', '\.pyc$']

" ctrlp.vim (replaces FuzzyFinder and Command-T)
let g:ctrlp_map = '<Leader>t'
let g:ctrlp_match_window_bottom = 0
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_custom_ignore = '\v\~$|\.(o|swp|pyc|wav|mp3|ogg|blend)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|__init__\.py'
let g:ctrlp_working_path_mode = 0
let g:ctrlp_dotfiles = 0
let g:ctrlp_switch_buffer = 0
nmap ; :CtrlPBuffer<CR>

" Powerline
if has('gui_running')
  let g:Powerline_symbols = "unicode"
endif

" rainbow Parentheses Improved
let g:rainbow_active = 1

" Section: Color and syntax {{{1
"--------------------------------------------------------------------------

" Helper to initialize Zenburn colors in 256-color mode.
set background=dark
syntax on

if !has('gui_running')
  if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
    set t_Co=256
    let &t_ti = "\<Esc>[?47h"
    let &t_te = "\<Esc>[?47l"
  elseif has("terminfo")
    colorscheme default
    set t_Co=8
    let &t_ti = "\<Esc>[?47h"
    let &t_te = "\<Esc>[?47l"
    set t_Sf=[3%p1%dm
    set t_Sb=[4%p1%dm
  else
    colorscheme default
    set t_Co=8
    let &t_ti = "\<Esc>[?47h"
    let &t_te = "\<Esc>[?47l"
    set t_Sf=[3%dm
    set t_Sb=[4%dm
  endif
else
    let g:solarized_termcolors=256
    colorscheme solarized
endif


" window splits & ruler were too bright - change to white on grey
" (shouldn't change GUI or non-color term appearance)
highlight StatusLine   cterm=NONE ctermbg=blue ctermfg=white
highlight StatusLineNC cterm=NONE ctermbg=black ctermfg=white
highlight VertSplit    cterm=NONE ctermbg=black ctermfg=white

" turn off coloring for CDATA
highlight def link xmlCdata NONE

" custom incorrect spelling colors
highlight SpellBad     term=underline cterm=underline ctermbg=NONE ctermfg=red
highlight SpellCap     term=underline cterm=underline ctermbg=NONE ctermfg=blue
highlight SpellRare    term=underline cterm=underline ctermbg=NONE ctermfg=magenta
highlight SpellLocal   term=underline cterm=underline ctermbg=NONE ctermfg=cyan

" ignore should be... ignored
highlight Ignore cterm=bold ctermfg=black
highlight clear FoldColumn
highlight def link FoldColumn Ignore
highlight clear Folded
highlight link Folded Ignore
highlight clear LineNr
highlight! def link LineNr Ignore

" nice-looking hilight if I remember to set my terminal colors
"highlight clear Search
highlight Search term=NONE cterm=NONE ctermfg=white ctermbg=black

" make hilighted matching parents less offensive
highlight clear MatchParen
highlight link MatchParen Search

" colors for NERD_tree
highlight def link NERDTreeRO NERDTreeFile

" make trailing spaces visible
highlight SpecialKey ctermbg=Yellow guibg=Yellow

" make menu selections visible
highlight PmenuSel ctermfg=black ctermbg=magenta

" the sign column slows down remote terminals
highlight clear SignColumn
highlight link SignColumn Ignore

" Markdown could be more fruit salady.
highlight link markdownH1 PreProc
highlight link markdownH2 PreProc
highlight link markdownLink Character
highlight link markdownBold String
highlight link markdownItalic Statement
highlight link markdownCode Delimiter
highlight link markdownCodeBlock Delimiter
highlight link markdownListMarker Todo


" Section: Other stuff {{{1
"-------------------------------------------------------------------------


" Section: Load ~/.vimlocal {{{1
"--------------------------------------------------------------------------

" now load specifics to this machine :)
"source ~/.vimlocal"}}}
